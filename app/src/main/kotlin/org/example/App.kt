/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import java.util.Scanner
import java.util.InputMismatchException

fun main() {
    println("=== PRUEBAS ETAPA 1: DEFINICIÓN BÁSICA DE LA CLASE FRACCION ===\n")
    
    // Crear fracciones válidas
    println("1. Creando fracciones válidas:")
    val fraccion1 = Fraccion(3, 4)
    val fraccion2 = Fraccion(1, 2)
    val fraccion3 = Fraccion(-5, 8)
    val fraccion4 = Fraccion(7, -3)
    
    println("Fracción 1: $fraccion1")
    println("Fracción 2: $fraccion2")
    println("Fracción 3: $fraccion3")
    println("Fracción 4: $fraccion4")
    
    // Usar el método mostrar()
    println("\n2. Usando el método mostrar():")
    print("Fracción 1 con mostrar(): ")
    fraccion1.mostrar()
    print("Fracción 2 con mostrar(): ")
    fraccion2.mostrar()
    
    // Acceder y modificar propiedades
    println("\n3. Modificando propiedades:")
    println("Fracción original: $fraccion1")
    fraccion1.numerador = 6
    println("Después de cambiar numerador a 6: $fraccion1")
    fraccion1.denominador = 8
    println("Después de cambiar denominador a 8: $fraccion1")
    
    // Probar validaciones
    println("\n4. Probando validaciones:")
    
    // Caso 1: Crear fracción con denominador cero
    println("Intentando crear fracción con denominador cero...")
    try {
        val fraccionInvalida = Fraccion(5, 0)
        println("ERROR: Se creó la fracción inválida: $fraccionInvalida")
    } catch (e: IllegalArgumentException) {
        println("✓ Validación correcta: ${e.message}")
    }
    
    // Caso 2: Cambiar denominador a cero
    println("\nIntentando cambiar denominador a cero...")
    try {
        fraccion2.denominador = 0
        println("ERROR: Se cambió el denominador a cero: $fraccion2")
    } catch (e: IllegalArgumentException) {
        println("✓ Validación correcta: ${e.message}")
    }
    
    // Resumen de fracciones creadas para usar en siguientes etapas
    println("\n5. Fracciones disponibles para pruebas futuras:")
    println("fraccion1 = $fraccion1")
    println("fraccion2 = $fraccion2") 
    println("fraccion3 = $fraccion3")
    println("fraccion4 = $fraccion4")
    
    println("\n=== FIN PRUEBAS ETAPA 1 ===")
    
    // ===========================================
    // PRUEBAS ETAPA 2: SUMA Y RESTA
    // ===========================================
    println("\n=== PRUEBAS ETAPA 2: SUMA Y RESTA DE FRACCIONES ===\n")
    
    // Recrear fracciones para las pruebas (ya que modificamos fraccion1 antes)
    val f1 = Fraccion(1, 2)  // 1/2
    val f2 = Fraccion(1, 3)  // 1/3
    val f3 = Fraccion(3, 4)  // 3/4
    val f4 = Fraccion(-2, 5) // -2/5
    
    println("Fracciones para operar:")
    println("f1 = $f1")
    println("f2 = $f2")
    println("f3 = $f3")
    println("f4 = $f4")
    
    // Pruebas de suma
    println("\n1. Pruebas de suma (+):")
    println("$f1 + $f2 = ${f1 + f2}")
    println("$f1 + $f3 = ${f1 + f3}")
    println("$f2 + $f3 = ${f2 + f3}")
    println("$f1 + $f4 = ${f1 + f4}") // Con fracción negativa
    println("$f4 + $f3 = ${f4 + f3}") // Con fracción negativa
    
    // Pruebas de resta
    println("\n2. Pruebas de resta (-):")
    println("$f1 - $f2 = ${f1 - f2}")
    println("$f3 - $f1 = ${f3 - f1}")
    println("$f2 - $f3 = ${f2 - f3}")
    println("$f1 - $f4 = ${f1 - f4}") // Con fracción negativa
    println("$f4 - $f1 = ${f4 - f1}") // Con fracción negativa
    
    // Pruebas de simplificación automática
    println("\n3. Verificando simplificación automática:")
    val f5 = Fraccion(2, 4)  // 2/4 = 1/2
    val f6 = Fraccion(3, 6)  // 3/6 = 1/2
    println("$f5 + $f6 = ${f5 + f6}") // Debería dar 1/1 = 1
    
    val f7 = Fraccion(6, 8)  // 6/8 = 3/4
    val f8 = Fraccion(2, 8)  // 2/8 = 1/4
    println("$f7 - $f8 = ${f7 - f8}") // Debería dar 1/2
    
    // Casos especiales
    println("\n4. Casos especiales:")
    val cero = Fraccion(0, 1)  // 0/1 = 0
    println("Suma con cero: $f1 + $cero = ${f1 + cero}")
    println("Resta con cero: $f1 - $cero = ${f1 - cero}")
    println("Cero menos fracción: $cero - $f1 = ${cero - f1}")
    
    // Operaciones encadenadas
    println("\n5. Operaciones encadenadas:")
    val resultado1 = f1 + f2 + f3
    println("$f1 + $f2 + $f3 = $resultado1")
    
    val resultado2 = f3 - f1 - f2
    println("$f3 - $f1 - $f2 = $resultado2")
    
    println("\n=== FIN PRUEBAS ETAPA 2 ===")

    // ===========================================
    // PRUEBAS ETAPA 3: MULTIPLICACIÓN Y DIVISIÓN
    // ===========================================
    println("\n=== PRUEBAS ETAPA 3: MULTIPLICACIÓN Y DIVISIÓN ===\n")
    
    // Usar las mismas fracciones que ya tenemos
    println("Fracciones: f1=$f1, f2=$f2, f3=$f3, f4=$f4")
    
    // Pruebas de multiplicación
    println("\n1. Multiplicación (*):")
    println("$f1 * $f2 = ${f1 * f2}")
    println("$f3 * $f4 = ${f3 * f4}")
    
    // Pruebas de división
    println("\n2. División (/):")
    println("$f1 / $f2 = ${f1 / f2}")
    println("$f3 / $f4 = ${f3 / f4}")
    
    // Caso especial: división por cero
    println("\n3. Validación división por cero:")
    try {
        val fraccionCero = Fraccion(0, 1)
        val resultado = f1 / fraccionCero
        println("ERROR: No detectó división por cero")
    } catch (e: IllegalArgumentException) {
        println("✓ Validación correcta: ${e.message}")
    }
    
    println("\n=== FIN PRUEBAS ETAPA 3 ===")


    println("\n=== PRUEBAS ETAPA 4: VALIDACIONES Y UTILIDADES ===\n")
    
    println("Fracciones: f1=$f1, f2=$f2, f3=$f3")
    
    // Pruebas de comparación
    println("\n1. Comparaciones:")
    println("$f1 > $f2 = ${f1.esMayor(f2)}")
    println("$f2 < $f3 = ${f2.esMenor(f3)}")
    println("$f1 == $f2 = ${f1.equals(f2)}")
    
    // Pruebas de conversión a decimal
    println("\n2. Conversión a decimal:")
    println("$f1 = ${f1.aDecimal()}")
    println("$f3 = ${f3.aDecimal()}")
    
    // Pruebas de creación desde decimal
    println("\n3. Creación desde decimal:")
    val f9 = Fraccion.desdeDecimal(0.25)
    val f10 = Fraccion.desdeDecimal(0.75)
    println("0.25 → $f9")
    println("0.75 → $f10")
    
    println("\n=== FIN PRUEBAS ETAPA 4 ===")
}

fun mostrarMenu() {
    println("=== CALCULADORA DE FRACCIONES ===")
    println("1. Sumar fracciones")
    println("2. Restar fracciones")
    println("3. Multiplicar fracciones")
    println("4. Dividir fracciones")
    println("5. Comparar fracciones")
    println("6. Convertir fracción a decimal")
    println("7. Crear fracción desde decimal")
    println("8. Ejemplos predefinidos")
    println("0. Salir")
    print("Ingrese su opción: ")
}

/**
 * Lee una fracción desde la entrada del usuario
 * @param scanner el scanner para leer entrada
 * @param mensaje mensaje a mostrar al usuario
 * @return la fracción leída
 */
fun leerFraccion(scanner: Scanner, mensaje: String): Fraccion {
    println(mensaje)
    while (true) {
        try {
            print("Numerador: ")
            val numerador = scanner.nextInt()
            print("Denominador: ")
            val denominador = scanner.nextInt()
            return Fraccion(numerador, denominador)
        } catch (e: IllegalArgumentException) {
            println("Error: ${e.message}")
            println("Intente nuevamente:")
        } catch (e: InputMismatchException) {
            println("Error: Ingrese solo números enteros.")
            scanner.nextLine() // Limpiar buffer
            println("Intente nuevamente:")
        }
    }
}

/**
 * Realiza suma de dos fracciones
 */
fun realizarSuma(scanner: Scanner) {
    println("\n--- SUMA DE FRACCIONES ---")
    val f1 = leerFraccion(scanner, "Ingrese la primera fracción:")
    val f2 = leerFraccion(scanner, "Ingrese la segunda fracción:")
    val resultado = f1 + f2
    println("Resultado: $f1 + $f2 = $resultado")
}

/**
 * Realiza resta de dos fracciones
 */
fun realizarResta(scanner: Scanner) {
    println("\n--- RESTA DE FRACCIONES ---")
    val f1 = leerFraccion(scanner, "Ingrese la primera fracción:")
    val f2 = leerFraccion(scanner, "Ingrese la segunda fracción:")
    val resultado = f1 - f2
    println("Resultado: $f1 - $f2 = $resultado")
}

/**
 * Realiza multiplicación de dos fracciones
 */
fun realizarMultiplicacion(scanner: Scanner) {
    println("\n--- MULTIPLICACIÓN DE FRACCIONES ---")
    val f1 = leerFraccion(scanner, "Ingrese la primera fracción:")
    val f2 = leerFraccion(scanner, "Ingrese la segunda fracción:")
    val resultado = f1 * f2
    println("Resultado: $f1 * $f2 = $resultado")
}

/**
 * Realiza división de dos fracciones
 */
fun realizarDivision(scanner: Scanner) {
    println("\n--- DIVISIÓN DE FRACCIONES ---")
    val f1 = leerFraccion(scanner, "Ingrese la primera fracción:")
    val f2 = leerFraccion(scanner, "Ingrese la segunda fracción:")
    
    try {
        val resultado = f1 / f2
        println("Resultado: $f1 / $f2 = $resultado")
    } catch (e: IllegalArgumentException) {
        println("Error: ${e.message}")
    }
}

/**
 * Compara dos fracciones
 */
fun realizarComparacion(scanner: Scanner) {
    println("\n--- COMPARACIÓN DE FRACCIONES ---")
    val f1 = leerFraccion(scanner, "Ingrese la primera fracción:")
    val f2 = leerFraccion(scanner, "Ingrese la segunda fracción:")
    
    when {
        f1.esMayor(f2) -> println("$f1 > $f2")
        f1.esMenor(f2) -> println("$f1 < $f2")
        else -> println("$f1 = $f2")
    }
}

/**
 * Convierte una fracción a decimal
 */
fun convertirADecimal(scanner: Scanner) {
    println("\n--- CONVERSIÓN A DECIMAL ---")
    val f = leerFraccion(scanner, "Ingrese la fracción:")
    println("$f = ${f.aDecimal()}")
}

/**
 * Crea una fracción desde un decimal
 */
fun crearDesdeDecimal(scanner: Scanner) {
    println("\n--- CREAR FRACCIÓN DESDE DECIMAL ---")
    while (true) {
        try {
            print("Ingrese el número decimal: ")
            val decimal = scanner.nextDouble()
            val fraccion = Fraccion.desdeDecimal(decimal)
            println("$decimal ≈ $fraccion")
            break
        } catch (e: InputMismatchException) {
            println("Error: Ingrese un número decimal válido.")
            scanner.nextLine() // Limpiar buffer
        }
    }
}

/**
 * Muestra ejemplos predefinidos de todas las operaciones
 */
fun mostrarEjemplos() {
    println("\n=== EJEMPLOS PREDEFINIDOS ===")
    
    val f1 = Fraccion(1, 2)  // 1/2
    val f2 = Fraccion(1, 3)  // 1/3
    
    println("Fracción 1: $f1")
    println("Fracción 2: $f2")
    println("Suma: $f1 + $f2 = ${f1 + f2}")
    println("Resta: $f1 - $f2 = ${f1 - f2}")
    println("Multiplicación: $f1 * $f2 = ${f1 * f2}")
    println("División: $f1 / $f2 = ${f1 / f2}")
    println("¿$f1 > $f2? ${f1.esMayor(f2)}")
    println("$f1 en decimal: ${f1.aDecimal()}")
}

/**
 * Función principal del programa
 */
fun main() {
    val scanner = Scanner(System.`in`)
    var opcion: Int
    
    println("¡Bienvenido a la Calculadora de Fracciones!")
    
    do {
        try {
            mostrarMenu()
            opcion = scanner.nextInt()
            
            when (opcion) {
                1 -> realizarSuma(scanner)
                2 -> realizarResta(scanner)
                3 -> realizarMultiplicacion(scanner)
                4 -> realizarDivision(scanner)
                5 -> realizarComparacion(scanner)
                6 -> convertirADecimal(scanner)
                7 -> crearDesdeDecimal(scanner)
                8 -> mostrarEjemplos()
                0 -> println("¡Hasta luego!")
                else -> println("Opción inválida. Intente de nuevo.")
            }
            
            if (opcion != 0) {
                println("\nPresione Enter para continuar...")
                scanner.nextLine() // Limpiar buffer
                scanner.nextLine() // Esperar Enter
                println() // Línea en blanco
            }
            
        } catch (e: InputMismatchException) {
            println("Error: Ingrese solo números para las opciones del menú.")
            scanner.nextLine() // Limpiar buffer
            opcion = -1 // Para no salir del bucle
        }
        
    } while (opcion != 0)
    
    scanner.close()
}




